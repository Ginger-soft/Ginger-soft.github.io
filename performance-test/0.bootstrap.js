(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../pkg/performance_test.js":
/*!**********************************!*\
  !*** ../pkg/performance_test.js ***!
  \**********************************/
/*! exports provided: usize2Shape, export_shape, Shape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _performance_test_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./performance_test_bg.wasm */ \"../pkg/performance_test_bg.wasm\");\n/* harmony import */ var _performance_test_bg_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./performance_test_bg.js */ \"../pkg/performance_test_bg.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"usize2Shape\", function() { return _performance_test_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"usize2Shape\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"export_shape\", function() { return _performance_test_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"export_shape\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Shape\", function() { return _performance_test_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"Shape\"]; });\n\n\n\n\n//# sourceURL=webpack:///../pkg/performance_test.js?");

/***/ }),

/***/ "../pkg/performance_test_bg.js":
/*!*************************************!*\
  !*** ../pkg/performance_test_bg.js ***!
  \*************************************/
/*! exports provided: usize2Shape, export_shape, Shape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"usize2Shape\", function() { return usize2Shape; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"export_shape\", function() { return export_shape; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Shape\", function() { return Shape; });\n/* harmony import */ var _performance_test_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./performance_test_bg.wasm */ \"../pkg/performance_test_bg.wasm\");\n\n\n/**\n* @param {number} value\n* @returns {number}\n*/\nfunction usize2Shape(value) {\n    var ret = _performance_test_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"usize2Shape\"](value);\n    return ret >>> 0;\n}\n\nlet cachegetFloat32Memory0 = null;\nfunction getFloat32Memory0() {\n    if (cachegetFloat32Memory0 === null || cachegetFloat32Memory0.buffer !== _performance_test_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetFloat32Memory0 = new Float32Array(_performance_test_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetFloat32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArrayF32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getFloat32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== _performance_test_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetInt32Memory0 = new Int32Array(_performance_test_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== _performance_test_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory0 = new Uint8Array(_performance_test_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n* @param {number} shapeIndex\n* @param {Float32Array} scale\n* @param {Float32Array} args\n* @returns {string}\n*/\nfunction export_shape(shapeIndex, scale, args) {\n    try {\n        const retptr = _performance_test_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_export_0\"].value - 16;\n        _performance_test_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_export_0\"].value = retptr;\n        var ptr0 = passArrayF32ToWasm0(scale, _performance_test_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"]);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArrayF32ToWasm0(args, _performance_test_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"]);\n        var len1 = WASM_VECTOR_LEN;\n        _performance_test_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"export_shape\"](retptr, shapeIndex, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        _performance_test_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_export_0\"].value += 16;\n        _performance_test_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](r0, r1);\n    }\n}\n\n/**\n*/\nconst Shape = Object.freeze({ Plane:0,\"0\":\"Plane\",Disk:1,\"1\":\"Disk\",Cube:2,\"2\":\"Cube\",Sphere:3,\"3\":\"Sphere\",Cylinder:4,\"4\":\"Cylinder\",Tube:5,\"5\":\"Tube\", });\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../www/node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))\n\n//# sourceURL=webpack:///../pkg/performance_test_bg.js?");

/***/ }),

/***/ "../pkg/performance_test_bg.wasm":
/*!***************************************!*\
  !*** ../pkg/performance_test_bg.wasm ***!
  \***************************************/
/*! exports provided: memory, usize2Shape, export_shape, __wbindgen_export_0, __wbindgen_malloc, __wbindgen_free */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/performance_test_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _pkg_performance_test__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pkg/performance_test */ \"../pkg/performance_test.js\");\n\r\n\r\nfunction do_test_wasm() {\r\n    let t0, t1, data;\r\n\r\n    t0 = performance.now();\r\n    data = _pkg_performance_test__WEBPACK_IMPORTED_MODULE_0__[\"export_shape\"](0, [1.5, 1.5, 1.5], [1000]);\r\n    t1 = performance.now();\r\n    console.log(`WASM-plane took ${t1 - t0} milliseconds.`);\r\n}\r\n\r\nfunction do_test_js() {\r\n    let t0, t1, data;\r\n\r\n    t0 = performance.now();\r\n    data = export_shape(0, [1.5, 1.5, 1.5], [1000]);\r\n    t1 = performance.now();\r\n    console.log(`JS----plane took ${t1 - t0} milliseconds.`);\r\n}\r\n\r\ndocument.getElementById('wasm').addEventListener(\"click\", do_test_wasm);\r\ndocument.getElementById('js').addEventListener(\"click\", do_test_js);\r\n\r\nclass ShapeData {\r\n    constructor(vertices, nr_of_triangles) {\r\n        this.vertices = vertices;\r\n        this.nr_of_triangles = nr_of_triangles;\r\n    }\r\n}\r\n\r\nfunction export_shape(shapeIndex, scale, args) {\r\n    let data = \"\";\r\n    let shape_data = generate_geometry(shapeIndex, scale, args);\r\n\r\n    for (let i = 0; i < shape_data.vertices.length; i += 3) {\r\n        data.concat(\"v \");\r\n        data.concat(shape_data.vertices[i    ]);\r\n        data.concat(\" \");\r\n        data.concat(shape_data.vertices[i + 1]);\r\n        data.concat(\" \");\r\n        data.concat(shape_data.vertices[i + 2]);\r\n        data.concat(\"\\n\");\r\n    }\r\n\r\n    for (let i = 0; i < shape_data.vertices.length / 3; i += 3) {\r\n        data.concat(\"f \");\r\n        data.concat((i + 1));\r\n        data.concat(\" \");\r\n        data.concat((i + 2));\r\n        data.concat(\" \");\r\n        data.concat((i + 3));\r\n        data.concat(\"\\n\");\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nfunction generate_geometry(shapeIndex, scale, args) {\r\n    let vertices;\r\n    let nr_of_triangles;\r\n    \r\n    switch (shapeIndex) {\r\n      // plane\r\n      case 0:\r\n        vertices = plane(args[0]);\r\n        nr_of_triangles = nr_of_plane_triangles(args[0]);\r\n\r\n        break;\r\n\r\n      // disk\r\n      case 1:\r\n        vertices = disk(args[0], args[1]);\r\n        nr_of_triangles = nr_of_disk_triangles(args[0]);\r\n\r\n        break;\r\n\r\n      // cube\r\n      case 2:\r\n        vertices = cube(args[0]);\r\n        nr_of_triangles = nr_of_cube_triangles(args[0]);\r\n\r\n        break;\r\n\r\n      // sphere\r\n      case 3:\r\n        vertices = sphere(args[0]);\r\n        nr_of_triangles = nr_of_cube_sphere(args[0]);\r\n\r\n        break;\r\n\r\n      // cylinder\r\n      case 4:\r\n        vertices = cylinder(args[0], args[1]);\r\n        nr_of_triangles = nr_of_cylinder_triangles(args[0]);\r\n\r\n        break;\r\n\r\n      // tube\r\n      case 5:\r\n        vertices = tube(args[0], args[1], args[2]);\r\n        nr_of_triangles = nr_of_tube_triangles(args[0]);\r\n\r\n        break;\r\n    }\r\n\r\n    // scale\r\n    if (!((scale[0] == 1.0) && (scale[1] == 1.0) && (scale[2] == 1.0))) {\r\n        for (let i = 0; i < vertices.length; i += 3) {\r\n            vertices[i    ] *= scale[0];\r\n            vertices[i + 1] *= scale[1];\r\n            vertices[i + 2] *= scale[2];\r\n        }\r\n    }\r\n\r\n    return new ShapeData(vertices, nr_of_triangles);\r\n}\r\n\r\n\r\n// plane\r\nfunction nr_of_plane_triangles(subdivisions) {\r\n    return (subdivisions * subdivisions) * 2;\r\n}\r\n\r\nfunction plane(subdivisions) {\r\n    let temp_vec = [];\r\n    let step = 1 / subdivisions;\r\n\r\n    for (let y = 0; y < subdivisions; y++) {\r\n        for (let x = 0; x < subdivisions; x++) {\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n            temp_vec.push(0.0);\r\n\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(step * y - 0.5);\r\n            temp_vec.push(0.0);\r\n\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n            temp_vec.push(0.0);\r\n\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n            temp_vec.push(0.0);\r\n\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(step * y - 0.5);\r\n            temp_vec.push(0.0);\r\n\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(step * y - 0.5);\r\n            temp_vec.push(0.0);\r\n        }\r\n    }\r\n\r\n    return temp_vec;\r\n}\r\n\r\n// disk\r\nfunction nr_of_disk_triangles(sides) {\r\n    return sides;\r\n}\r\n\r\nfunction disk(sides, radius) {\r\n    let temp_vec;\r\n    let step = 2 * Math.PI / sides;\r\n\r\n    for (let i = 0; sides; i++) {\r\n        temp_vec.push(Math.cos(i       * step) * radius);\r\n        temp_vec.push(Math.sin(i       * step) * radius);\r\n        temp_vec.push(0.0                              );\r\n            \r\n        temp_vec.push(Math.cos((i + 1) * step) * radius);\r\n        temp_vec.push(Math.cos((i + 1) * step) * radius);\r\n        temp_vec.push(0.0                              );\r\n            \r\n        temp_vec.push(0.0                              );\r\n        temp_vec.push(0.0                              );\r\n        temp_vec.push(0.0                              );\r\n    }\r\n\r\n    return temp_vec;\r\n}\r\n\r\n// cube\r\nfunction nr_of_cube_triangles(subdivisions) {\r\n    return nr_of_plane_triangles(subdivisions) * 6;\r\n}\r\n\r\nfunction cube(subdivisions) {\r\n    let temp_vec;\r\n    let step = 1 / subdivisions;\r\n\r\n    for (let y = 0; y < subdivisions; y++) {\r\n        for (let x = 0; x < subdivisions; x++) {\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n            temp_vec.push(0.5);\r\n\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(step * y - 0.5);\r\n            temp_vec.push(0.5);\r\n\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n            temp_vec.push(0.5);\r\n            \r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n            temp_vec.push(0.5);\r\n\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(step * y - 0.5);\r\n            temp_vec.push(0.5);\r\n\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(step * y - 0.5);\r\n            temp_vec.push(0.5);\r\n        }\r\n    }\r\n\r\n    for (let y = 0; y < subdivisions; y++) {\r\n        for (let x = 0; x < subdivisions; x++) {\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(step * y - 0.5);\r\n            temp_vec.push(-0.5);\r\n\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n            temp_vec.push(-0.5);\r\n\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n            temp_vec.push(-0.5);\r\n\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(step * y - 0.5);\r\n            temp_vec.push(-0.5);\r\n\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n            temp_vec.push(-0.5);\r\n\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(step * y - 0.5);\r\n            temp_vec.push(-0.5);\r\n        }\r\n    }\r\n\r\n    for (let y = 0; y < subdivisions; y++) {\r\n        for (let x = 0; x < subdivisions; x++) {\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(0.5);\r\n            temp_vec.push(step * y - 0.5);\r\n\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(0.5);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(0.5);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(0.5);\r\n            temp_vec.push(step * y - 0.5);\r\n\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(0.5);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n\r\n\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(0.5);\r\n            temp_vec.push(step * y - 0.5);\r\n        }\r\n    }\r\n\r\n    for (let y = 0; y < subdivisions; y++) {\r\n        for (let x = 0; x < subdivisions; x++) {\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(-0.5);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(-0.5);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(-0.5);\r\n            temp_vec.push(step * y - 0.5);\r\n\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(-0.5);\r\n            temp_vec.push(step * y - 0.5);\r\n\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(-0.5);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(-0.5);\r\n            temp_vec.push(step * y - 0.5);\r\n        }\r\n    }\r\n\r\n    for (let y = 0; y < subdivisions; y++) {\r\n        for (let x = 0; x < subdivisions; x++) {\r\n            temp_vec.push(0.5);\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n\r\n            temp_vec.push(0.5);\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n\r\n            temp_vec.push(0.5);\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(step * y - 0.5);\r\n\r\n            temp_vec.push(0.5);\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(step * y - 0.5);\r\n\r\n            temp_vec.push(0.5);\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n\r\n            temp_vec.push(0.5);\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(step * y - 0.5);\r\n        }\r\n    }\r\n\r\n    for (let y = 0; y < subdivisions; y++) {\r\n        for (let x = 0; x < subdivisions; x++) {\r\n            temp_vec.push(-0.5);\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n\r\n            temp_vec.push(-0.5);\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n\r\n            temp_vec.push(-0.5);\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(step * y - 0.5);\r\n\r\n            temp_vec.push(-0.5);\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(step * y - 0.5 + step);\r\n\r\n            temp_vec.push(-0.5);\r\n            temp_vec.push(step * x - 0.5 + step);\r\n            temp_vec.push(step * y - 0.5);\r\n\r\n            temp_vec.push(-0.5);\r\n            temp_vec.push(step * x - 0.5);\r\n            temp_vec.push(step * y - 0.5);\r\n        }\r\n    }\r\n\r\n    return temp_vec;\r\n}\r\n\r\n// sphere\r\nfunction nr_of_sphere_triangles(subdivisions) {\r\n    return nr_of_cube_triangles(subdivisions);\r\n}\r\n\r\nfunction sphere(subdivisions) {\r\n    let temp_vec = cube(subdivisions);\r\n    let length;\r\n\r\n    for (let i = 0; temp_vec.length; i + 3) {\r\n        length = \r\n        Math.sqrt\r\n        (\r\n            (temp_vec[i    ] * temp_vec[i    ]) + \r\n            (temp_vec[i + 1] * temp_vec[i + 1]) + \r\n            (temp_vec[i + 2] * temp_vec[i + 2])\r\n        );\r\n            \r\n        temp_vec[i    ] = temp_vec[i    ] / length;\r\n        temp_vec[i + 1] = temp_vec[i + 1] / length;\r\n        temp_vec[i + 2] = temp_vec[i + 2] / length;\r\n    }\r\n\r\n    return temp_vec;\r\n}\r\n\r\n// cylinder\r\nfunction nr_of_cylinder_triangles(sides) {\r\n    return (nr_of_disk_triangles(sides) * 2) + (sides * 2);\r\n}\r\n\r\nfunction cylinder(sides, radius) {\r\n    let temp_vec;\r\n    let step = 2 * Math.PI / sides;\r\n\r\n    // Top\r\n    for (let i = 0; sides; i++) {\r\n        temp_vec.push(Math.cos((i + 1) * step) * radius);\r\n        temp_vec.push(0.5                              );\r\n        temp_vec.push(Math.sin((i + 1) * step) * radius);\r\n            \r\n        temp_vec.push(Math.cos(i       * step) * radius);\r\n        temp_vec.push(0.5                              );\r\n        temp_vec.push(Math.sin(i       * step) * radius);\r\n            \r\n        temp_vec.push(0.0                              );\r\n        temp_vec.push(0.5                              );\r\n        temp_vec.push(0.0                              );\r\n    }\r\n\r\n    // Outside ring\r\n    for (let i = 0; sides; i++) {\r\n        temp_vec.push(Math.cos(i       * step) * radius);\r\n        temp_vec.push(0.5                              );\r\n        temp_vec.push(Math.sin(i       * step) * radius);\r\n            \r\n        temp_vec.push(Math.cos((i + 1) * step) * radius);\r\n        temp_vec.push(0.5                              );\r\n        temp_vec.push(Math.sin((i + 1) * step) * radius);\r\n\r\n        temp_vec.push(Math.cos(i       * step) * radius);\r\n        temp_vec.push(-0.5                             );\r\n        temp_vec.push(Math.sin(i       * step) * radius);\r\n\r\n        temp_vec.push(Math.cos((i + 1) * step) * radius);\r\n        temp_vec.push(-0.5                             );\r\n        temp_vec.push(Math.sin((i + 1) * step) * radius);\r\n\r\n        temp_vec.push(Math.cos(i       * step) * radius);\r\n        temp_vec.push(-0.5                             );\r\n        temp_vec.push(Math.sin(i       * step) * radius);\r\n\r\n        temp_vec.push(Math.cos((i + 1) * step) * radius);\r\n        temp_vec.push(0.5                              );\r\n        temp_vec.push(Math.sin((i + 1) * step) * radius);\r\n    }\r\n\r\n    // Bottom\r\n    for (let i = 0; sides; i++) {\r\n        temp_vec.push(Math.cos(i       * step) * radius);\r\n        temp_vec.push(-0.5                             );\r\n        temp_vec.push(Math.sin(i       * step) * radius);\r\n\r\n        temp_vec.push(Math.cos((i + 1) * step) * radius);\r\n        temp_vec.push(-0.5                             );\r\n        temp_vec.push(Math.sin((i + 1) * step) * radius);\r\n            \r\n        temp_vec.push(0.0                              );\r\n        temp_vec.push(-0.5                             );\r\n        temp_vec.push(0.0                              );\r\n    }\r\n\r\n    return temp_vec;\r\n}\r\n\r\n// tube\r\nfunction nr_of_tube_triangles(sides) {\r\n    return sides * 8;\r\n}\r\n\r\nfunction tube(sides, inner_radius, outer_radius) {\r\n    let temp_vec;\r\n    let step = 2 * Math.PI / sides;\r\n\r\n    // top ring\r\n    for (let i = 0; sides; i++) {\r\n        temp_vec.push(Math.cos(i       * step) * inner_radius);\r\n        temp_vec.push(0.5                                    );\r\n        temp_vec.push(Math.sin(i       * step) * inner_radius);\r\n        \r\n        temp_vec.push(Math.cos((i + 1) * step) * inner_radius);\r\n        temp_vec.push(0.5                                    );\r\n        temp_vec.push(Math.sin((i + 1) * step) * inner_radius);\r\n            \r\n        temp_vec.push(Math.cos(i       * step) * outer_radius);\r\n        temp_vec.push(0.5                                    );\r\n        temp_vec.push(Math.sin(i       * step) * outer_radius);\r\n        \r\n        temp_vec.push(Math.cos(i       * step) * outer_radius);\r\n        temp_vec.push(0.5                                    );\r\n        temp_vec.push(Math.sin(i       * step) * outer_radius);\r\n\r\n        temp_vec.push(Math.cos((i + 1) * step) * inner_radius);\r\n        temp_vec.push(0.5                                    );\r\n        temp_vec.push(Math.sin((i + 1) * step) * inner_radius);\r\n\r\n        temp_vec.push(Math.cos((i + 1) * step) * outer_radius);\r\n        temp_vec.push(0.5                                    );\r\n        temp_vec.push(Math.sin((i + 1) * step) * outer_radius);\r\n    }\r\n\r\n    // outer cylinder\r\n    for (let i = 0; sides; i++) {\r\n        temp_vec.push(Math.cos(i       * step) * outer_radius);\r\n        temp_vec.push(0.5                                    );\r\n        temp_vec.push(Math.sin(i       * step) * outer_radius);\r\n            \r\n        temp_vec.push(Math.cos((i + 1) * step) * outer_radius);\r\n        temp_vec.push(0.5                                    );\r\n        temp_vec.push(Math.sin((i + 1) * step) * outer_radius);\r\n\r\n        temp_vec.push(Math.cos(i       * step) * outer_radius);\r\n        temp_vec.push(-0.5                                   );\r\n        temp_vec.push(Math.sin(i       * step) * outer_radius);\r\n\r\n        temp_vec.push(Math.cos((i + 1) * step) * outer_radius);\r\n        temp_vec.push(-0.5                                   );\r\n        temp_vec.push(Math.sin((i + 1) * step) * outer_radius);\r\n\r\n        temp_vec.push(Math.cos(i       * step) * outer_radius);\r\n        temp_vec.push(-0.5                                   );\r\n        temp_vec.push(Math.sin(i       * step) * outer_radius);\r\n\r\n        temp_vec.push(Math.cos((i + 1) * step) * outer_radius);\r\n        temp_vec.push(0.5                                    );\r\n        temp_vec.push(Math.sin((i + 1) * step) * outer_radius);\r\n    }\r\n\r\n    // inner cylinder\r\n    for (let i = 0; sides; i++) {\r\n        temp_vec.push(Math.cos((i + 1) * step) * inner_radius);\r\n        temp_vec.push(0.5                                    );\r\n        temp_vec.push(Math.sin((i + 1) * step) * inner_radius);\r\n        \r\n        temp_vec.push(Math.cos(i       * step) * inner_radius);\r\n        temp_vec.push(0.5                                    );\r\n        temp_vec.push(Math.sin(i       * step) * inner_radius);\r\n            \r\n        temp_vec.push(Math.cos(i       * step) * inner_radius);\r\n        temp_vec.push(-0.5                                   );\r\n        temp_vec.push(Math.sin(i       * step) * inner_radius);\r\n        \r\n        temp_vec.push(Math.cos(i       * step) * inner_radius);\r\n        temp_vec.push(-0.5                                   );\r\n        temp_vec.push(Math.sin(i       * step) * inner_radius);\r\n\r\n        temp_vec.push(Math.cos((i + 1) * step) * inner_radius);\r\n        temp_vec.push(-0.5                                   );\r\n        temp_vec.push(Math.sin((i + 1) * step) * inner_radius);\r\n        \r\n        temp_vec.push(Math.cos((i + 1) * step) * inner_radius);\r\n        temp_vec.push(0.5                                    );\r\n        temp_vec.push(Math.sin((i + 1) * step) * inner_radius);\r\n    }\r\n\r\n    // bottom ring\r\n    for (let i = 0; sides; i++) {\r\n        temp_vec.push(Math.cos((i + 1) * step) * inner_radius);\r\n        temp_vec.push(-0.5                                   );\r\n        temp_vec.push(Math.sin((i + 1) * step) * inner_radius);\r\n            \r\n        temp_vec.push(Math.cos(i       * step) * inner_radius);\r\n        temp_vec.push(-0.5                                   );\r\n        temp_vec.push(Math.sin(i       * step) * inner_radius);\r\n            \r\n        temp_vec.push(Math.cos(i       * step) * outer_radius);\r\n        temp_vec.push(-0.5                                   );\r\n        temp_vec.push(Math.sin(i       * step) * outer_radius);\r\n\r\n        temp_vec.push(Math.cos((i + 1) * step) * inner_radius);\r\n        temp_vec.push(-0.5                                   );\r\n        temp_vec.push(Math.sin((i + 1) * step) * inner_radius);\r\n\r\n        temp_vec.push(Math.cos(i       * step) * outer_radius);\r\n        temp_vec.push(-0.5                                   );\r\n        temp_vec.push(Math.sin(i       * step) * outer_radius);\r\n\r\n        temp_vec.push(Math.cos((i + 1) * step) * outer_radius);\r\n        temp_vec.push(-0.5                                   );\r\n        temp_vec.push(Math.sin((i + 1) * step) * outer_radius);\r\n    }\r\n\r\n    return temp_vec;\r\n}\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack:///(webpack)/buildin/harmony-module.js?");

/***/ })

}]);